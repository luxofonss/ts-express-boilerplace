generator client {
     provider = "prisma-client-js"
}

datasource db {
     provider = "postgresql"
     url      = env("DATABASE_URL")
}

enum Role {
     USER
     ADMIN
     MANAGER
     FRONTEND
     BACKEND
     DEVOPS
     DESIGNER
     QA
     MARKETING
     SALES
     HR
     FINANCE
     EXECUTIVE
     MONETIZATION
     GAME_DESIGN
     CTO
     CEO
}

model Account {
     id                String   @id @default(cuid())
     userId            String
     type              String
     provider          String
     providerAccountId String
     refreshToken      String?  @db.Text
     accessToken       String   @db.Text
     expiresAt         DateTime
     tokenType         String
     scope             String
     idToken           String?  @db.Text
     sessionState      String?

     user User @relation(fields: [userId], references: [id], onDelete: Cascade)

     @@unique([provider, providerAccountId])
}

model User {
     id                     String                   @id @default(cuid())
     name                   String
     email                  String?                  @unique
     password               String
     emailVerified          DateTime?
     createdAt              DateTime                 @default(now())
     role                   Role                     @default(USER)
     accounts               Account[]
     refreshTokens          RefreshToken[]
     resetToken             ResetToken[]
     emailVerificationToken EmailVerificationToken[]
     KeyPair                KeyPair[]
     Document               Document[]
}

model RefreshToken {
     id        String   @id @default(cuid())
     token     String   @unique
     user      User     @relation(fields: [userId], references: [id])
     userId    String
     createdAt DateTime @default(now())
}

model ResetToken {
     id        String   @id @default(cuid())
     token     String   @unique
     expiresAt DateTime
     user      User     @relation(fields: [userId], references: [id])
     userId    String
     createdAt DateTime @default(now())
}

model KeyPair {
     id                  String   @id @default(cuid())
     encryptedPrivateKey String   @unique
     publicKey           String   @unique
     user                User     @relation(fields: [userId], references: [id])
     userId              String
     createdAt           DateTime @default(now())
}

model EmailVerificationToken {
     id        String   @id @default(cuid())
     token     String   @unique
     expiresAt DateTime
     user      User     @relation(fields: [userId], references: [id])
     userId    String
     createdAt DateTime @default(now())
}

model Document {
     id        String   @id @default(cuid())
     name      String
     content   String
     user      User     @relation(fields: [userId], references: [id])
     userId    String
     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt
}
